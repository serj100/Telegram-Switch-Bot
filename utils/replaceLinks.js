const { howType } = require('./howType')

const replacelinks = async (linkBefore) => {
    let arrayTemplates = []
    const iDoNotKnowHow = '–Ø –Ω–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç üòí'
    const err = '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.'
    let arrayTemplatesWithoutLinks = []
    let typeLinks = ''
    let arrayLinks = []
    let arrayDescriptions = []
    let tempSting = ''
    let tempDecriptionArray1 = []
    let resultString = ''

    if (linkBefore) {
        typeLinks = howType(linkBefore)
    } else {
        return err
    }


    switch (typeLinks) {
        case 'one':
            try {

                tempSting = linkBefore.replace(/\[.*?\]\(.*?\)/g, '@new_link@')
                arrayTemplates = await linkBefore.match(/\[.*?\]\(.*?\)/g) // –¥–æ—Å—Ç–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã

                for (i = 0; i < arrayTemplates.length; i++) {
                    arrayDescriptions.push(...arrayTemplates[i].match(/(?<=(\[))(.*?)(?=(\]))/g)) // —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –º–µ–∂–¥—É []
                }

                for (i = 0; i < arrayTemplates.length; i++) {
                    arrayLinks.push(...arrayTemplates[i].match(/(https?:\/\/|ftps?:\/\/|www\.)((?![.,?!;:()]*(\s|$))[^\s]){2,}/g)) // —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–∑ —Å—Å—ã–ª–æ–∫
                }

                for (i = 0; i < arrayTemplates.length; i++) {
                    resultString = tempSting.replace('@new_link@', `((${arrayLinks[i]} ${arrayDescriptions[i]}))`) // —Å–æ–µ–¥–µ–Ω—è–µ–º –≤—Å–µ —ç—Ç–∏ —à—Ç—É—á–∫–∏ –≤–æ–µ–¥–∏–Ω–æ
                    tempSting = resultString
                }

                return resultString
            } catch {
                return err
            }
        case 'two': {
            try {
                tempSting = linkBefore.replace(/\(\(.*?\)\)/g, '@new_link@')
                arrayTemplates = await linkBefore.match(/\(\(.*?\)\)/g) // –¥–æ—Å—Ç–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
                
                for (i = 0; i < arrayTemplates.length; i++) {
                    arrayLinks.push(...arrayTemplates[i].match(/(https?:\/\/|ftps?:\/\/|www\.)((?![.,?!;:()]*(\s|$))[^\s]){2,}/g)) // —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–∑ —Å—Å—ã–ª–æ–∫
                }
                
                for (i = 0; i < arrayTemplates.length; i++) {
                    arrayTemplatesWithoutLinks.push(arrayTemplates[i].replace(/(https?:\/\/|ftps?:\/\/|www\.)((?![.,?!;:()]*(\s|$))[^\s]){2,}/g, ''))
                    tempDecriptionArray1.push(arrayTemplatesWithoutLinks[i].slice(3))
                    arrayDescriptions.push(tempDecriptionArray1[i].slice(0, -2)) // —Ç—É—Ç —É–∂–µ –∏–º–µ–µ–º –º–∞—Å—Å–∏–≤ –æ–ø–∏—Å–∞–Ω–∏–π —Å—Å—ã–ª–æ–∫
                }

                for (i = 0; i < arrayTemplates.length; i++) {
                    resultString = tempSting.replace('@new_link@', `[${arrayDescriptions[i]}](${arrayLinks[i]})`) // —Å–æ–µ–¥–µ–Ω—è–µ–º –≤—Å–µ —ç—Ç–∏ —à—Ç—É—á–∫–∏ –≤–æ–µ–¥–∏–Ω–æ
                    tempSting = resultString
                }

                return resultString
            } catch {
                return err
            }
        }
        case 'one_and_two': {
            resultString = iDoNotKnowHow
            return resultString
        }
        case 'unknown': {
            resultString = iDoNotKnowHow
            return resultString
        }
        case 'error': {
            resultString = err
            return resultString
        }
        default:
            resultString = err
            return resultString
    }
}

module.exports = { replacelinks }