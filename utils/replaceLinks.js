const { howType } = require('./howType')

const replacelinks = async (linkBefore) => {
    const iDoNotKnowHow = '–Ø –Ω–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç üòí'
    const err = '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.'
    let typeLinks = ''
    let arrayLinks = []
    let arrayDescriptions = []
    let tempSting = ''
    let tempArray = []
    let resultString = ''

    if (linkBefore) {
        typeLinks = howType(linkBefore)
    } else {
        return err
    }


    switch (typeLinks) {
        case 'one':
            try {
                arrayDescriptions = await linkBefore.match(/(?<=(\[))(.*?)(?=(\]))/g) // —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –º–µ–∂–¥—É []
                tempSting = await linkBefore.replace(/(\))/g, ' @new_descr@))') // ')' –≤ —Å—Ç—Ä–æ–∫–µ –∑–∞–º–µ–Ω–µ–º –Ω–∞ ' @new_descr@))' –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø–æ–¥—Å—Ç–∞–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –º–∞—Å—Å–∏–≤–∞ arrayDescriptions
                tempSting = await tempSting.replace(/\[(.*?)\]/g, '(') // –∑–∞–º–µ–Ω—è–µ–º [] –≤–º–µ—Å—Ç–µ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –Ω–∞ '(', –ø–æ–ª—É—á–∞–µ—Ç—Å—è (( –ø–µ—Ä–µ–¥ —Å—Å—ã–ª–∫–æ–π
                // –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤ –∏ –∑–∞–º–µ–Ω—è–µ–º –≤ —Å—Ç—Ä–æ–∫–µ –≤—Å–µ '@new_descr@'
                for (i = 0; i < arrayDescriptions.length; i++) {
                    resultString = tempSting.replace('@new_descr@', arrayDescriptions[i])
                    tempSting = resultString
                }
                return resultString // –Ω–∞–π—Å, —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–µ —Ç—Ä–æ–≥–∞–µ–º )
            } catch {
                return err
            }

        case 'two': {
            try {
                arrayLinks = await linkBefore.match(/(https?:\/\/|ftps?:\/\/|www\.)((?![.,?!;:()]*(\s|$))[^\s]){2,}/gim) // –≤—Å–µ —Å—Å—ã–ª–∫–∏ –≤ –º–∞—Å—Å–∏–≤
                tempSting = await linkBefore.replace(/(\(\(https?:\/\/|ftps?:\/\/|www\.)((?![.,?!;:()]*(\s|$))[^\s]){2,}(.*?)\)\)/gim, '@new_link@') // –∑–∞–º–µ–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞ '@new_link@' –¥–ª—è –∑–∞–º–µ–Ω—ã –≤ —Ü–∏–∫–ª–µ
                tempArray2 = await linkBefore.match(/(\(\(https?:\/\/|ftps?:\/\/|www\.)((?![.,?!;:()]*(\s|$))[^\s]){2,}(\s(.*?)\)\))/gim) // (()) —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º


                for (i = 0; i < tempArray2.length; i++) {
                    arrayDescriptions.push(tempArray2[i].replace(/(\(\(https?:\/\/|ftps?:\/\/|www\.)((?![.,?!;:()]*(\s|$))[^\s]){2,}\s/gim, '')) // —É–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º "–æ–ø–∏—Å–∞–Ω–∏–µ))"
                    tempArray.push(arrayDescriptions[i].replace('))', '')) // —É–¥–∞–ª—è–µ–º –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è '))'
                }

                // —Ü–∏–∫–ª–æ–º –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å—Ç—Ä–æ–∫–µ, –∑–∞–º–µ–Ω—è—è @new_descr@ –Ω–∞ —à–∞–±–ª–æ–Ω —Å—Ç—Ä–æ–∫–∏
                for (i = 0; i < arrayLinks.length; i++) {
                    resultString = tempSting.replace('@new_link@', `[${tempArray[i]}](${arrayLinks[i]})`)
                    tempSting = resultString
                }
                return resultString
            } catch {
                return err
            }
        }
        case 'one_and_two': {
            resultString = iDoNotKnowHow
            return resultString
        }
        case 'unknown': {
            resultString = iDoNotKnowHow
            return resultString
        }
        case 'error': {
            resultString = err
            return resultString
        }
        default:
            resultString = err
            return resultString
    }
}

module.exports = { replacelinks }